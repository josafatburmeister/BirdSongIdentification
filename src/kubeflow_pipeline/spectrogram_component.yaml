name: Create spectrograms
description: Creates spectrograms from audio files
inputs:
  - {
      name: GCS Bucket,
      type: String,
      default: "bird-song-identification",
      description: "Name of Google Cloud Storage bucket that should be used for caching spectrogram files",
    }
  - {
      name: Input Path,
      type: Directory,
      description: "Path of the data folder",
    }
  - {
      name: Chunk Length,
      type: Integer,
      description: "Chunk length in milliseconds",
    }
  - {
      name: Include Noise Samples,
      type: Bool,
      default: True,
      description: "Whether a class for noise samples should be used in model training",
    }
  - {
      name: Signal Threshold,
      type: Int,
      default: 3,
      description: "Used to determine wehther a spectrogram contains a relevant signal. The threshold defines the minimum number of rows with signal a spectrogram must have.",
    }
  - {
      name: Noise Threshold,
      type: Int,
      default: 1,
      description: "Used to determine wehther a spectrogram only contains a noise. The threshold defines the maximum number of rows with signal a spectrogram can have to be classified as noise.",
    }
  - {
      name: Clear Spectrogram Cache,
      type: Bool,
      default: False,
      description: "Whether the spectrogram cache should be cleared before running the download component",
    }
  - {
      name: Verbose Logging,
      type: Bool,
      default: False,
      description: "Whether logging should be verbose",
    }
outputs:
  - { name: Output Path, type: Directory }
implementation:
  container:
    image: bird-song-identification:latest
    command:
      [
        python,
        kubeflow_pipeline/run_pipeline.py,
        create_spectrograms,
        --input_path,
        { inputPath: Input Path },
        --gcs_bucket,
        { inputValue: GCS Bucket },
        --output_path,
        { outputPath: Output Path },
        --chunk_length,
        { inputValue: Chunk Length },
        --include_noise_samples,
        { inputValue: Include Noise Samples },
        --signal_threshold,
        { inputValue: Signal Threshold },
        --noise_threshold,
        { inputValue: Noise Threshold },
        --clear_spectrogram_cache,
        { inputValue: Clear Spectrogram Cache },
        --verbose_logging,
        { inputValue: Verbose Logging },
      ]
